{"version":3,"sources":["Components/Business/Business.js","Components/BusinessList/BusinessList.js","Components/SearchBar/SearchBar.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["Business","className","src","this","props","business","imageSrc","alt","name","address","city","zipCode","category","rating","reviewCount","React","Component","BusinessList","businesses","b","push","length","defaultProps","SearchBar","state","term","location","sortBy","handleTermChange","bind","handleLocationChange","handleSearch","sortByOptions","sortByOption","setState","e","target","value","searchYelp","preventDefault","Object","keys","map","sortByOptionValue","ClassName","getSortByClass","onClick","handleSortByChange","key","renderSortByOptions","onChange","placeholder","App","console","log","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sUA4BeA,G,6KAvBP,OACI,yBAAKC,UAAU,YACX,yBAAKA,UAAU,mBACX,yBAAKC,IAAKC,KAAKC,MAAMC,SAASC,SAAUC,IAAI,MAEhD,4BAAKJ,KAAKC,MAAMC,SAASG,MACzB,yBAAKP,UAAU,wBACX,yBAAKA,UAAU,oBACX,2BAAIE,KAAKC,MAAMC,SAASI,SACxB,2BAAIN,KAAKC,MAAMC,SAASK,MACxB,2BAAIP,KAAKC,MAAMC,SAASK,KAAxB,IAA+BP,KAAKC,MAAMC,SAASM,UAEvD,yBAAKV,UAAU,oBACX,4BAAKE,KAAKC,MAAMC,SAASO,UACzB,wBAAIX,UAAU,UAAUE,KAAKC,MAAMC,SAASQ,QAC5C,2BAAIV,KAAKC,MAAMC,SAASS,YAAxB,mB,GAjBDC,IAAMC,YCCvBC,G,6KAEE,IADK,EACCC,EAAa,GADd,cAEUf,KAAKC,MAAMc,YAFrB,IAEL,IAAI,EAAJ,qBAAsC,CAAC,IAA7BC,EAA4B,QAClCD,EAAWE,KAAK,kBAAC,EAAD,CAAUf,SAAUc,MAHnC,8BAKL,OAAyB,IAAtBD,EAAWG,OAEN,yBAAKpB,UAAU,gBAAf,WAMA,yBAAKA,UAAU,gBACViB,O,GAfMH,IAAMC,YAuBjCC,EAAaK,aAAe,CAACJ,WAAY,IAC1BD,Q,OC0CAM,G,wDAhEX,WAAYnB,GAAQ,IAAD,8BACf,cAAMA,IACDoB,MAAQ,CAACC,KAAO,GAAIC,SAAW,GAAIC,OAAS,cACjD,EAAKC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKC,qBAAuB,EAAKA,qBAAqBD,KAA1B,gBAC5B,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBACpB,EAAKG,cAAgB,CACjB,aAAc,aACd,gBAAiB,SACjB,gBAAiB,gBATN,E,+DAaAC,GACf9B,KAAK+B,SAAS,CAACP,OAASM,M,uCAGXE,GACbhC,KAAK+B,SAAS,CAACT,KAAOU,EAAEC,OAAOC,U,2CAGdF,GACjBhC,KAAK+B,SAAS,CAACR,SAAWS,EAAEC,OAAOC,U,mCAG1BF,GACThC,KAAKC,MAAMkC,WAAWnC,KAAKqB,MAAMC,KAAMtB,KAAKqB,MAAME,SAAUvB,KAAKqB,MAAMG,QACvEQ,EAAEI,mB,qCAGSN,GACX,OAAG9B,KAAKqB,MAAMG,SAAWM,EACd,SAEJ,K,4CAGY,IAAD,OAClB,OAAOO,OAAOC,KAAKtC,KAAK6B,eAAeU,KAAI,SAAAT,GACvC,IAAIU,EAAoB,EAAKX,cAAcC,GAC3C,OAAO,wBAAIW,UAAW,EAAKC,iBAAkBC,QAAS,EAAKC,mBAAmBlB,KAAK,EAAMc,GAAoBK,IAAKL,GAAoBV,Q,+BAK1I,OACI,yBAAKhC,UAAU,aACX,yBAAKA,UAAU,0BACX,4BACKE,KAAK8C,wBAGd,yBAAKhD,UAAU,oBACX,2BAAOiD,SAAU/C,KAAKyB,iBAAkBuB,YAAY,sBACpD,2BAAOD,SAAU/C,KAAK2B,qBAAsBqB,YAAY,YAE5D,yBAAKlD,UAAU,oBACX,4BAAQ6C,QAAS3C,KAAK4B,cAAtB,kB,GA1DIhB,IAAMC,YCCxBX,EAAW,CACfC,SAAU,gFACVE,KAAM,sBACNC,QAAS,sBACTC,KAAM,aACNc,MAAO,KACPb,QAAS,QACTC,SAAU,UACVC,OAAQ,IACRC,YAAa,IAGTI,EAAa,CAACb,EAAUA,EAAUA,EAAUA,EAAUA,EAAUA,GAgBvD+C,MAdf,WAKE,OACE,yBAAKnD,UAAU,OACb,wCACA,kBAAC,EAAD,CAAWqC,WAPf,SAAoBb,EAAMC,EAAUC,GAClC0B,QAAQC,IAAR,8BAAmC7B,EAAnC,aAA4CC,EAA5C,aAAyDC,OAOvD,kBAAC,EAAD,CAAcT,WAAYA,MCjBZqC,QACW,cAA7BC,OAAO9B,SAAS+B,UAEe,UAA7BD,OAAO9B,SAAS+B,UAEhBD,OAAO9B,SAAS+B,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlB,QAAQkB,MAAMA,EAAMC,c","file":"static/js/main.19b47952.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Business.css';\r\n\r\nclass Business extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Business\">\r\n                <div className=\"image-container\">\r\n                    <img src={this.props.business.imageSrc} alt='' />\r\n                </div>\r\n                <h2>{this.props.business.name}</h2>\r\n                <div className=\"Business-information\">\r\n                    <div className=\"Business-address\">\r\n                        <p>{this.props.business.address}</p>\r\n                        <p>{this.props.business.city}</p>\r\n                        <p>{this.props.business.city} {this.props.business.zipCode}</p>\r\n                    </div>\r\n                    <div className=\"Business-reviews\">\r\n                        <h3>{this.props.business.category}</h3>\r\n                        <h3 className=\"rating\">{this.props.business.rating}</h3>\r\n                        <p>{this.props.business.reviewCount} reviews</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Business;","import React from 'react';\r\nimport Business from '../Business/Business';\r\nimport './BusinessList.css';\r\n\r\nclass BusinessList extends React.Component {\r\n    render() {\r\n        const businesses = [];\r\n        for(const b of this.props.businesses) {\r\n            businesses.push(<Business business={b}/>)\r\n        }\r\n        if(businesses.length === 0) {\r\n            return (\r\n                <div className=\"BusinessList\">\r\n                    No Item\r\n                </div>\r\n            ) \r\n        } else {\r\n            return (\r\n                <div className=\"BusinessList\">\r\n                    {businesses}\r\n                </div>\r\n            )\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nBusinessList.defaultProps = {businesses: []};\r\nexport default BusinessList;","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\n\r\n\r\nclass SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {term : \"\", location : \"\", sortBy : \"best_match\"};\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n        this.handleLocationChange = this.handleLocationChange.bind(this);\r\n        this.handleSearch = this.handleSearch.bind(this);\r\n        this.sortByOptions = {\r\n            'Best Match': 'best_match',\r\n            'Highest Rated': 'rating',\r\n            'Most Reviewed': 'review_count'\r\n        };\r\n    }\r\n\r\n    handleSortByChange(sortByOption) {\r\n        this.setState({sortBy : sortByOption})\r\n    }\r\n\r\n    handleTermChange(e) {\r\n        this.setState({term : e.target.value});\r\n    }\r\n\r\n    handleLocationChange(e) {\r\n        this.setState({location : e.target.value});\r\n    }\r\n\r\n    handleSearch(e) {\r\n        this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\r\n        e.preventDefault();\r\n    }\r\n\r\n    getSortByClass(sortByOption) {\r\n        if(this.state.sortBy === sortByOption) {\r\n            return \"active\";\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    renderSortByOptions() {\r\n        return Object.keys(this.sortByOptions).map(sortByOption => {\r\n            let sortByOptionValue = this.sortByOptions[sortByOption];\r\n            return <li ClassName={this.getSortByClass()} onClick={this.handleSortByChange.bind(this, sortByOptionValue)} key={sortByOptionValue}>{sortByOption}</li>;\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                <div className=\"SearchBar-sort-options\">\r\n                    <ul>\r\n                        {this.renderSortByOptions()}\r\n                    </ul>\r\n                </div>\r\n                <div className=\"SearchBar-fields\">\r\n                    <input onChange={this.handleTermChange} placeholder=\"Search Businesses\" />\r\n                    <input onChange={this.handleLocationChange} placeholder=\"Where?\" />\r\n                </div>\r\n                <div className=\"SearchBar-submit\">\r\n                    <button onClick={this.handleSearch}>Let's Go</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport './App.css';\r\nimport BusinessList from '../BusinessList/BusinessList'\r\nimport SearchBar from '../SearchBar/SearchBar'\r\n\r\n\r\nconst business = {\r\n  imageSrc: 'https://s3.amazonaws.com/codecademy-content/programs/react/ravenous/pizza.jpg',\r\n  name: 'MarginOtto Pizzeria',\r\n  address: '1010 Paddington Way',\r\n  city: 'Flavortown',\r\n  state: 'NY',\r\n  zipCode: '10101',\r\n  category: 'Italian',\r\n  rating: 4.5,\r\n  reviewCount: 90\r\n};\r\n\r\nconst businesses = [business, business, business, business, business, business];\r\n\r\nfunction App() {\r\n  function searchYelp(term, location, sortBy) {\r\n    console.log(`Searching Yelp with ${term}, ${location}, ${sortBy}`)\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>ravenous</h1>\r\n      <SearchBar searchYelp={searchYelp}/>\r\n      <BusinessList businesses={businesses} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}